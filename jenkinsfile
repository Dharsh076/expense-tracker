pipeline {
  agent any

  environment {
    IMAGE_NAME            = "dharsh076/expense-tracker"
    IMAGE_TAG             = "${env.BUILD_NUMBER}"

    DOCKERHUB_CREDENTIALS = "dockerhub-creds"
    RENDER_DEPLOY_HOOK    = credentials('render-deploy-hook')
    RENDER_HEALTH_URL     = credentials('https://expense-tracker-1-hj0i.onrender.com/health')  // Jenkins Secret Text
    GIT_REPO_URL          = "https://github.com/Dharsh076/expense-tracker.git"
  }

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '25'))
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]
        ])
      }
    }

    stage('Unit Tests') {
      steps {
        sh '''
          # same test commands as before...
        '''
      }
    } // <-- make sure this is here to close stage

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest ."
      }
    }

    stage('Push Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_TOKEN')]) {
          sh '''
            set -e
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:latest
            docker logout || true
          '''
        }
      }
    }

    stage('Trigger Render Deploy') {
      when { expression { return env.RENDER_DEPLOY_HOOK?.trim() } }
      steps {
        sh '''
          echo "Triggering Render deploy..."
          curl -fsSL "$RENDER_DEPLOY_HOOK"
        '''
      }
    }

    stage('Wait for Health') {
      when { expression { return env.RENDER_HEALTH_URL?.trim() } }
      steps {
        sh '''
          echo "Checking health at: $RENDER_HEALTH_URL"
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$RENDER_HEALTH_URL" || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy ✅"
              exit 0
            fi
            echo "Waiting for health... ($i/60) (got $code)"
            sleep 5
          done
          exit 1
        '''
      }
    }
  }

  post {
    success { echo '✅ CI/CD complete: built, pushed, and deployed to Render.' }
    failure { echo '❌ Pipeline failed. Check logs above.' }
  }
}
