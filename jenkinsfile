pipeline {
  agent any

  environment {
    // TODO 1: set your Docker Hub repo
    IMAGE_NAME            = "dharsh076/expense-tracker"
    IMAGE_TAG             = "${env.BUILD_NUMBER}"

    // TODO 2: set Jenkins credential IDs
    DOCKERHUB_CREDENTIALS = "dharsh076/Vasusasikala27"          // username/password
    RENDER_DEPLOY_HOOK    = credentials('render-deploy-hook') // Secret Text = Render Deploy Hook URL

    // TODO 3: set your live Render URL (no trailing slash)
    RENDER_SERVICE_URL    = "https://expense-tracker-1-hj0i.onrender.com"

    // Optional: if you prefer to pin a repo URL here, keep GIT_REPO_URL
    GIT_REPO_URL          = "https://github.com/Dharsh076/expense-tracker.git"
  }

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '25'))
  }

  stages {
    stage('Checkout') {
      steps {
        // If the job is "Pipeline script from SCM", you can use: checkout scm
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]
        ])
      }
    }

    stage('Unit Tests') {
      steps {
        sh '''
          set -e
          echo "Workspace: $(pwd)"
          echo "Top-level files:"
          ls -la
          echo "app/ files (if present):"
          ls -la app || true

          # Use a Python container for repeatability
          docker run --rm \
            -v "$PWD":/workspace -w /workspace \
            python:3.11 bash -lc '
              set -e
              python -m pip install --upgrade pip

              if [ -f requirements.txt ]; then
                echo "‚úÖ Using requirements.txt at repo root"
                python -m pip install --no-cache-dir -r requirements.txt
              elif [ -f app/requirements.txt ]; then
                echo "‚úÖ Using app/requirements.txt"
                python -m pip install --no-cache-dir -r app/requirements.txt
              else
                echo "‚ö†Ô∏è  No requirements.txt found, installing pytest only"
                python -m pip install --no-cache-dir pytest
              fi

              # Run pytest; treat "no tests collected" (exit code 5) as success
              set +e
              python -m pytest -q
              code=$?
              if [ "$code" -eq 5 ]; then
                echo "‚ÑπÔ∏è  No tests collected; continuing pipeline."
                exit 0
              fi
              exit $code
            '
        '''
      }
}


    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest ."
      }
    }

    stage('Push Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
          sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
          sh "docker push ${IMAGE_NAME}:latest"
        }
      }
    }

    // üîΩ NEW: Trigger Render deployment via deploy hook
    stage('Trigger Render Deploy') {
      when { branch 'main' }
      steps {
        sh 'curl -fsS -X POST "$RENDER_DEPLOY_HOOK" > /dev/null'
        echo 'Render deploy triggered.'
      }
    }

    // üîΩ NEW: Wait for the app to become healthy
    stage('Wait for Health') {
      when { branch 'main' }
      steps {
        sh '''
          set -e
          for i in $(seq 1 30); do
            echo "Health check attempt $i..."
            if curl -fsS "$RENDER_SERVICE_URL/health" > /dev/null; then
              echo "Service is healthy ‚úÖ"
              exit 0
            fi
            sleep 10
          done
          echo "Service did not become healthy in time ‚ùå"
          exit 1
        '''
      }
    }
  }

  post {
    success { echo '‚úÖ CI/CD complete: built, pushed, and deployed to Render.' }
    failure { echo '‚ùå Pipeline failed. Check logs above.' }
  }
}
